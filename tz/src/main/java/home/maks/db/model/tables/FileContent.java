/*
 * This file is generated by jOOQ.
*/
package home.maks.db.model.tables;


import home.maks.db.model.Indexes;
import home.maks.db.model.Tz;
import home.maks.db.model.tables.records.FileContentRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FileContent extends TableImpl<FileContentRecord> {

    private static final long serialVersionUID = -516600609;

    /**
     * The reference instance of <code>TZ.FILE_CONTENT</code>
     */
    public static final FileContent FILE_CONTENT = new FileContent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FileContentRecord> getRecordType() {
        return FileContentRecord.class;
    }

    /**
     * The column <code>TZ.FILE_CONTENT.FILE_ID</code>.
     */
    public final TableField<FileContentRecord, Integer> FILE_ID = createField("FILE_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TZ.FILE_CONTENT.SEQ_ID</code>.
     */
    public final TableField<FileContentRecord, Integer> SEQ_ID = createField("SEQ_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TZ.FILE_CONTENT.SSOID</code>.
     */
    public final TableField<FileContentRecord, String> SSOID = createField("SSOID", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>TZ.FILE_CONTENT.TS</code>.
     */
    public final TableField<FileContentRecord, Timestamp> TS = createField("TS", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>TZ.FILE_CONTENT.GRP</code>.
     */
    public final TableField<FileContentRecord, String> GRP = createField("GRP", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>TZ.FILE_CONTENT.TYPE</code>.
     */
    public final TableField<FileContentRecord, String> TYPE = createField("TYPE", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>TZ.FILE_CONTENT.SUBTYPE</code>.
     */
    public final TableField<FileContentRecord, String> SUBTYPE = createField("SUBTYPE", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>TZ.FILE_CONTENT.URL</code>.
     */
    public final TableField<FileContentRecord, String> URL = createField("URL", org.jooq.impl.SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>TZ.FILE_CONTENT.ORGID</code>.
     */
    public final TableField<FileContentRecord, String> ORGID = createField("ORGID", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>TZ.FILE_CONTENT.FORMID</code>.
     */
    public final TableField<FileContentRecord, String> FORMID = createField("FORMID", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>TZ.FILE_CONTENT.CODE</code>.
     */
    public final TableField<FileContentRecord, String> CODE = createField("CODE", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>TZ.FILE_CONTENT.LTPA</code>.
     */
    public final TableField<FileContentRecord, String> LTPA = createField("LTPA", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>TZ.FILE_CONTENT.SUDIRRESPONSE</code>.
     */
    public final TableField<FileContentRecord, String> SUDIRRESPONSE = createField("SUDIRRESPONSE", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>TZ.FILE_CONTENT.YMDH</code>.
     */
    public final TableField<FileContentRecord, String> YMDH = createField("YMDH", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * Create a <code>TZ.FILE_CONTENT</code> table reference
     */
    public FileContent() {
        this(DSL.name("FILE_CONTENT"), null);
    }

    /**
     * Create an aliased <code>TZ.FILE_CONTENT</code> table reference
     */
    public FileContent(String alias) {
        this(DSL.name(alias), FILE_CONTENT);
    }

    /**
     * Create an aliased <code>TZ.FILE_CONTENT</code> table reference
     */
    public FileContent(Name alias) {
        this(alias, FILE_CONTENT);
    }

    private FileContent(Name alias, Table<FileContentRecord> aliased) {
        this(alias, aliased, null);
    }

    private FileContent(Name alias, Table<FileContentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Tz.TZ;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NX_FILECONTENT_FILEID_TS, Indexes.NX_FILECONTENT_FILEID_FORMID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FileContent as(String alias) {
        return new FileContent(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FileContent as(Name alias) {
        return new FileContent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FileContent rename(String name) {
        return new FileContent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FileContent rename(Name name) {
        return new FileContent(name, null);
    }
}
