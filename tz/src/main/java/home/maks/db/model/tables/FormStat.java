/*
 * This file is generated by jOOQ.
*/
package home.maks.db.model.tables;


import home.maks.db.model.Indexes;
import home.maks.db.model.Tz;
import home.maks.db.model.tables.records.FormStatRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FormStat extends TableImpl<FormStatRecord> {

    private static final long serialVersionUID = 1682051605;

    /**
     * The reference instance of <code>TZ.FORM_STAT</code>
     */
    public static final FormStat FORM_STAT = new FormStat();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FormStatRecord> getRecordType() {
        return FormStatRecord.class;
    }

    /**
     * The column <code>TZ.FORM_STAT.FILE_ID</code>.
     */
    public final TableField<FormStatRecord, Integer> FILE_ID = createField("FILE_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TZ.FORM_STAT.SEQ_ID</code>.
     */
    public final TableField<FormStatRecord, Integer> SEQ_ID = createField("SEQ_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TZ.FORM_STAT.FORMID</code>.
     */
    public final TableField<FormStatRecord, String> FORMID = createField("FORMID", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>TZ.FORM_STAT.COUNT</code>.
     */
    public final TableField<FormStatRecord, Integer> COUNT = createField("COUNT", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>TZ.FORM_STAT</code> table reference
     */
    public FormStat() {
        this(DSL.name("FORM_STAT"), null);
    }

    /**
     * Create an aliased <code>TZ.FORM_STAT</code> table reference
     */
    public FormStat(String alias) {
        this(DSL.name(alias), FORM_STAT);
    }

    /**
     * Create an aliased <code>TZ.FORM_STAT</code> table reference
     */
    public FormStat(Name alias) {
        this(alias, FORM_STAT);
    }

    private FormStat(Name alias, Table<FormStatRecord> aliased) {
        this(alias, aliased, null);
    }

    private FormStat(Name alias, Table<FormStatRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Tz.TZ;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NX_FORMSTAT_FILEID_SEQID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FormStat as(String alias) {
        return new FormStat(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FormStat as(Name alias) {
        return new FormStat(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FormStat rename(String name) {
        return new FormStat(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FormStat rename(Name name) {
        return new FormStat(name, null);
    }
}
